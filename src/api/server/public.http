# ===================================================================
# üåê PUBLIC ENDPOINTS - Authentication & Registration
# ===================================================================
# No authentication required for these endpoints
# Used for: Registration, Login, Password Reset, Health Checks

@Server_HostAddress = https://localhost:7000
@API_Version = v1
@Base_Auth_URL = {{Server_HostAddress}}/api/{{API_Version}}/auth

# ===================================================================
# üè• HEALTH & STATUS CHECKS
# ===================================================================

### API Health Check
GET {{Base_Auth_URL}}/test

### API Information
GET {{Server_HostAddress}}/api

# ===================================================================
# üîê AUTHENTICATION FLOWS
# ===================================================================

### Admin Login (Copy token for admin.http)
# @name adminLogin
POST {{Base_Auth_URL}}/login
Content-Type: application/json

{
  "tckn": "24256590788",
  "password": "Admin123!"
}

### Standard User Login
# @name userLogin
POST {{Base_Auth_URL}}/login
Content-Type: application/json

{
  "tckn": "11111111110",
  "password": "test123"
}

### Generate Token (Alternative method)
POST {{Base_Auth_URL}}/token
Content-Type: application/json

{
  "tckn": "11111111110",
  "password": "User123!"
}

### Refresh Token
POST {{Base_Auth_URL}}/refresh
Content-Type: application/json

{
  "token": "{{userLogin.response.body.accessToken}}",
  "refreshToken": "{{userLogin.response.body.refreshToken}}"
}

# ===================================================================
# üë§ USER REGISTRATION
# ===================================================================

### Standard User Registration (18+ Valid)
### Step 1: Send SMS OTP (Register Request)
POST {{Base_Auth_URL}}/register-request
Content-Type: application/json

{
  "email": "user@example.com",
  "phoneNumber": "+905551234567",
  "tckn": "11111111110",
  "password": "test123",
  "firstName": "john",
  "lastName": "doe",
  "professionId": 1,
  "birthDate": "1990-01-01T00:00:00Z",
  "marketingConsent": true,
  "electronicCommunicationConsent": true,
  "membershipAgreementConsent": true
}

### Test: Under 18 Registration (Should Fail)
POST {{Base_Auth_URL}}/register-request
Content-Type: application/json

{
  "email": "young@example.com",
  "phoneNumber": "+905447627859",
  "tckn": "12345678901",
  "password": "Test123!",
  "firstName": "Gen√ß",
  "lastName": "Kullanƒ±cƒ±",
  "professionId": 1,
  "birthDate": "2010-01-01T00:00:00Z",
  "marketingConsent": false,
  "electronicCommunicationConsent": true,
  "membershipAgreementConsent": true
}

###

### Step 2: Verify OTP and Complete Registration
POST {{Base_Auth_URL}}/verify-registration
Content-Type: application/json

{
  "phoneNumber": "+905551234567",
  "otpCode": "1234"
}

### Test: Verify with 5XX format (should also work)
POST {{Base_Auth_URL}}/verify-registration
Content-Type: application/json

{
  "phoneNumber": "5551234567",
  "otpCode": "1234"
}

### Customer Admin Registration
POST {{Base_Auth_URL}}/register
Content-Type: application/json

{
  "email": "customeradmin@example.com",
  "username": "customeradmin",
  "phoneNumber": "5447627859",
  "tckn": "11111111111",
  "password": "Admin123!",
  "firstName": "Jane",
  "lastName": "Smith",
  "professionId": 1,
  "birthDate": "1985-03-15T00:00:00Z"
}

### Support User Registration
POST {{Base_Auth_URL}}/register
Content-Type: application/json

{
  "email": "support@example.com",
  "username": "supportuser",
  "phoneNumber": "5447627860",
  "tckn": "22222222222",
  "password": "Support123!",
  "firstName": "Mike",
  "lastName": "Johnson",
  "professionId": 2,
  "birthDate": "1988-07-20T00:00:00Z"
}

# ===================================================================
# üîÑ PASSWORD MANAGEMENT
# ===================================================================

### Request Password Reset
POST {{Base_Auth_URL}}/forgot-password
Content-Type: application/json

{
  "TcKimlikNo": "11111111110",
  "BirthDate": "1990-01-01T00:00:00Z"
}

### Select Reset Method (Email)
POST {{Base_Auth_URL}}/select-reset-method
Content-Type: application/json

{
  "TcKimlikNo": "11111111110",
  "BirthDate": "1990-01-01T00:00:00Z",
  "Method": 1
}

### Select Reset Method (SMS)
POST {{Base_Auth_URL}}/select-reset-method
Content-Type: application/json

{
  "TcKimlikNo": "11111111110",
  "BirthDate": "1990-01-01T00:00:00Z",
  "Method": 2
}

### Validate TC/Phone for Password Reset
POST {{Base_Auth_URL}}/validate-tc-phone
Content-Type: application/json

{
  "tckn": "11111111110",
  "phoneNumber": "5551234567"
}

### Reset Password with Token
POST {{Base_Auth_URL}}/reset-password
Content-Type: application/json

{
  "email": "user@example.com",
  "token": "RESET_TOKEN_FROM_EMAIL",
  "newPassword": "NewPassword123!"
}

# ===================================================================
# üÜî IDENTITY VERIFICATION (MERNƒ∞S)
# ===================================================================

### Test MERNƒ∞S Integration
POST {{Base_Auth_URL}}/test-mernis
Content-Type: application/json

{
  "tckn": "11111111110",
  "firstName": "John",
  "lastName": "Doe",
  "birthYear": 1990
}

### Test Turkish Characters
POST {{Base_Auth_URL}}/test-mernis
Content-Type: application/json

{
  "tckn": "11111111110", 
  "firstName": "√∂zg√ºr",
  "lastName": "≈üahin",
  "birthYear": 1985
}

# ===================================================================
# üêõ DEVELOPMENT & DEBUG ENDPOINTS
# ===================================================================

### Debug User Information
POST {{Base_Auth_URL}}/debug-user
Content-Type: application/json

{
  "tckn": "11111111110",
  "password": "User123!"
}

### Bootstrap Admin Role (Development Only)
POST {{Base_Auth_URL}}/bootstrap/assign-admin/00000000-0000-0000-0000-000000000001

# ===================================================================
# üìù VALIDATION TEST SCENARIOS
# ===================================================================

### Test Email Uniqueness Validation
POST {{Base_Auth_URL}}/register
Content-Type: application/json

{
  "email": "user@example.com",
  "username": "differentuser",
  "phoneNumber": "5551111111",
  "tckn": "33333333333",
  "password": "Test123!",
  "firstName": "Test",
  "lastName": "User",
  "profession": "Tester",
  "birthDate": "1992-01-01T00:00:00Z"
}

### Test Username Uniqueness Validation
POST {{Base_Auth_URL}}/register
Content-Type: application/json

{
  "email": "different@example.com",
  "username": "standarduser",
  "phoneNumber": "5552222222",
  "tckn": "44444444444",
  "password": "Test123!",
  "firstName": "Test",
  "lastName": "User2",
  "profession": "Tester",
  "birthDate": "1992-01-01T00:00:00Z"
}

### Test TCKN Validation
POST {{Base_Auth_URL}}/register
Content-Type: application/json

{
  "email": "invalid@example.com",
  "username": "invaliduser",
  "phoneNumber": "5553333333",
  "tckn": "12345678901",
  "password": "Test123!",
  "firstName": "Invalid",
  "lastName": "User",
  "profession": "Tester",
  "birthDate": "1992-01-01T00:00:00Z"
}

# ===================================================================
# üìã USAGE NOTES
# ===================================================================
#
# AUTHENTICATION FLOW:
# 1. Register ‚Üí Get user created
# 2. Login ‚Üí Get JWT + Refresh tokens
# 3. Use tokens in base_user.http or admin.http
#
# TOKEN MANAGEMENT:
# - Access tokens expire in 60 minutes
# - Refresh tokens expire in 7 days
# - Use refresh endpoint to get new tokens
#
# ROLE ASSIGNMENT:
# - New users get 'base_user' role by default
# - Use admin.http to assign other roles
# - Admin accounts must be created via bootstrap or admin endpoints
#
# DEVELOPMENT SETUP:
# 1. Ensure database is running
# 2. Run this file's endpoints to create test users
# 3. Copy tokens to appropriate role-based .http files
#
# PRODUCTION NOTES:
# - Remove bootstrap endpoints
# - Enable MERNƒ∞S verification
# - Set strong JWT secrets
# - Configure real email service 