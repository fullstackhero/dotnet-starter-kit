root = true

# All files
[*]
indent_style = space

# Xml files
[*.{xml,csproj,props,targets,ruleset,nuspec,resx}]
indent_size = 2

# Json files
[*.{json,config,nswag}]
indent_size = 2

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
tab_width = 4

# New line preferences
end_of_line = lf
insert_final_newline = true

#### .NET Coding Conventions ####
[*.{cs,vb}]

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:silent
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_method = false:silent
dotnet_style_qualification_for_property = false:silent

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:silent
dotnet_style_predefined_type_for_member_access = true:silent

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent

# Expression-level preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:suggestion

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

#### C# Coding Conventions ####
[*.cs]

# var preferences
csharp_style_var_elsewhere = false:silent
csharp_style_var_for_built_in_types = false:silent
csharp_style_var_when_type_is_apparent = false:silent

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_switch_expression = true:suggestion

# Null-checking preferences
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent

# Code-block preferences
csharp_prefer_braces = true:silent
csharp_prefer_simple_using_statement = true:suggestion

# Expression-level preferences
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:silent

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true
csharp_style_namespace_declarations = file_scoped:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_primary_constructors = true:suggestion
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
dotnet_diagnostic.CA1032.severity = none
dotnet_diagnostic.CA1812.severity = none
dotnet_diagnostic.S6667.severity = none

#### Naming styles ####
[*.{cs,vb}]

# Naming rules

dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.symbols = types_and_namespaces
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.interfaces_should_be_ipascalcase.severity = suggestion
dotnet_naming_rule.interfaces_should_be_ipascalcase.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_ipascalcase.style = ipascalcase

dotnet_naming_rule.type_parameters_should_be_tpascalcase.severity = suggestion
dotnet_naming_rule.type_parameters_should_be_tpascalcase.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_tpascalcase.style = tpascalcase

dotnet_naming_rule.methods_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.methods_should_be_pascalcase.symbols = methods
dotnet_naming_rule.methods_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.properties_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.properties_should_be_pascalcase.symbols = properties
dotnet_naming_rule.properties_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.events_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.events_should_be_pascalcase.symbols = events
dotnet_naming_rule.events_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_variables_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_variables_should_be_camelcase.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camelcase.style = camelcase

dotnet_naming_rule.local_constants_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_constants_should_be_camelcase.symbols = local_constants
dotnet_naming_rule.local_constants_should_be_camelcase.style = camelcase

dotnet_naming_rule.parameters_should_be_camelcase.severity = suggestion
dotnet_naming_rule.parameters_should_be_camelcase.symbols = parameters
dotnet_naming_rule.parameters_should_be_camelcase.style = camelcase

dotnet_naming_rule.public_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_fields_should_be_pascalcase.symbols = public_fields
dotnet_naming_rule.public_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_fields_should_be__camelcase.severity = suggestion
dotnet_naming_rule.private_fields_should_be__camelcase.symbols = private_fields
dotnet_naming_rule.private_fields_should_be__camelcase.style = _camelcase

dotnet_naming_rule.private_static_fields_should_be_s_camelcase.severity = suggestion
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.style = s_camelcase

dotnet_naming_rule.public_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.symbols = public_constant_fields
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.symbols = private_constant_fields
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.symbols = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.symbols = private_static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.enums_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.enums_should_be_pascalcase.symbols = enums
dotnet_naming_rule.enums_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_functions_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascalcase.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.non_field_members_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascalcase.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascalcase.style = pascalcase

# Symbol specifications

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interfaces.required_modifiers = 

dotnet_naming_symbols.enums.applicable_kinds = enum
dotnet_naming_symbols.enums.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enums.required_modifiers = 

dotnet_naming_symbols.events.applicable_kinds = event
dotnet_naming_symbols.events.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.events.required_modifiers = 

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.methods.required_modifiers = 

dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.properties.required_modifiers = 

dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_fields.required_modifiers = 

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_fields.required_modifiers = 

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_fields.required_modifiers = static

dotnet_naming_symbols.types_and_namespaces.applicable_kinds = namespace, class, struct, interface, enum
dotnet_naming_symbols.types_and_namespaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types_and_namespaces.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

dotnet_naming_symbols.type_parameters.applicable_kinds = namespace
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers = 

dotnet_naming_symbols.private_constant_fields.applicable_kinds = field
dotnet_naming_symbols.private_constant_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_constant_fields.required_modifiers = const

dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = local
dotnet_naming_symbols.local_variables.required_modifiers = 

dotnet_naming_symbols.local_constants.applicable_kinds = local
dotnet_naming_symbols.local_constants.applicable_accessibilities = local
dotnet_naming_symbols.local_constants.required_modifiers = const

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers = 

dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_functions.applicable_accessibilities = *
dotnet_naming_symbols.local_functions.required_modifiers = 

# Naming styles

dotnet_naming_style.pascalcase.required_prefix = 
dotnet_naming_style.pascalcase.required_suffix = 
dotnet_naming_style.pascalcase.word_separator = 
dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.ipascalcase.required_prefix = I
dotnet_naming_style.ipascalcase.required_suffix = 
dotnet_naming_style.ipascalcase.word_separator = 
dotnet_naming_style.ipascalcase.capitalization = pascal_case

dotnet_naming_style.tpascalcase.required_prefix = T
dotnet_naming_style.tpascalcase.required_suffix = 
dotnet_naming_style.tpascalcase.word_separator = 
dotnet_naming_style.tpascalcase.capitalization = pascal_case

dotnet_naming_style._camelcase.required_prefix = _
dotnet_naming_style._camelcase.required_suffix = 
dotnet_naming_style._camelcase.word_separator = 
dotnet_naming_style._camelcase.capitalization = camel_case

dotnet_naming_style.camelcase.required_prefix = 
dotnet_naming_style.camelcase.required_suffix = 
dotnet_naming_style.camelcase.word_separator = 
dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.s_camelcase.required_prefix = s_
dotnet_naming_style.s_camelcase.required_suffix = 
dotnet_naming_style.s_camelcase.word_separator = 
dotnet_naming_style.s_camelcase.capitalization = camel_case

dotnet_style_namespace_match_folder = true:suggestion

dotnet_diagnostic.CS1591.severity = none
dotnet_diagnostic.CA1724.severity = none
dotnet_diagnostic.CA1305.severity = none
dotnet_diagnostic.CA1040.severity = none
dotnet_diagnostic.CA1848.severity = none
dotnet_diagnostic.CA1034.severity = none
tab_width = 4
indent_size = 4
end_of_line = lf
dotnet_diagnostic.CA1711.severity = none
dotnet_diagnostic.CA1716.severity = none
dotnet_diagnostic.CA1062.severity = none
dotnet_diagnostic.CA1031.severity = none
dotnet_diagnostic.CA1861.severity = none
dotnet_diagnostic.CA2007.severity = none

# StyleCop Rules - Optimized to avoid conflicts
dotnet_diagnostic.SA1633.severity = none         # File should have header  
dotnet_diagnostic.SA1200.severity = warning      # Using directives should be placed correctly
dotnet_diagnostic.SA1101.severity = none         # Prefix local calls with this
dotnet_diagnostic.SA1309.severity = none         # Field names should not begin with underscore
dotnet_diagnostic.SA1413.severity = suggestion   # Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1600.severity = suggestion   # Elements should be documented (reduced from warning)
dotnet_diagnostic.SA1602.severity = suggestion   # Enumeration items should be documented
dotnet_diagnostic.SA1615.severity = suggestion   # Element return value should be documented
dotnet_diagnostic.SA1618.severity = suggestion   # Generic type parameters should be documented
dotnet_diagnostic.SA1028.severity = none         # Code should not contain trailing whitespace
dotnet_diagnostic.SA1518.severity = warning      # File should end with newline
dotnet_diagnostic.SA1515.severity = suggestion   # Single-line comment should be preceded by blank line
dotnet_diagnostic.SA1009.severity = suggestion   # Closing parenthesis should not be preceded by a space
dotnet_diagnostic.SA1111.severity = suggestion   # Closing parenthesis should be on line of last parameter
dotnet_diagnostic.SA1611.severity = suggestion   # Documentation for parameter is missing
dotnet_diagnostic.SA1629.severity = suggestion   # Documentation text should end with a period
dotnet_diagnostic.SA1623.severity = suggestion   # Property documentation should begin with Gets
dotnet_diagnostic.SA1116.severity = suggestion   # Parameters should begin on line after declaration
dotnet_diagnostic.SA1500.severity = suggestion   # Braces for multi-line statements should not share line
dotnet_diagnostic.SA1503.severity = suggestion   # Braces should not be omitted
dotnet_diagnostic.SA1026.severity = suggestion   # Code should not contain space after new keyword

# Security Rules - Critical for enterprise (Keep as errors)
dotnet_diagnostic.SCS0005.severity = error       # Weak random generator
dotnet_diagnostic.SCS0018.severity = error       # Potential Path Traversal
dotnet_diagnostic.SCS0026.severity = error       # SQL Injection
dotnet_diagnostic.SCS0027.severity = error       # Open Redirect
dotnet_diagnostic.SCS0029.severity = error       # XSS vulnerability
dotnet_diagnostic.SCS0031.severity = error       # Potential LDAP injection
dotnet_diagnostic.SCS0007.severity = error       # XML External Entity (XXE)
dotnet_diagnostic.SCS0002.severity = error       # SQL Injection: Dynamic query
dotnet_diagnostic.SCS0014.severity = error       # SQL Injection: WebControls

# Code Analysis Rules - Balanced for enterprise
dotnet_diagnostic.CA1031.severity = suggestion   # Do not catch general exception types
dotnet_diagnostic.CA1062.severity = suggestion   # Validate arguments of public methods
dotnet_diagnostic.CA1303.severity = none         # Do not pass literals as localized parameters
dotnet_diagnostic.CA1822.severity = suggestion   # Mark members as static
dotnet_diagnostic.CA2007.severity = none         # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA1515.severity = suggestion   # Make types internal (reduced from warning)
dotnet_diagnostic.CA1052.severity = warning      # Static holder types should be static or sealed
dotnet_diagnostic.CA1724.severity = none         # Type names should not match namespaces (disable to avoid conflicts)
dotnet_diagnostic.CA1305.severity = suggestion   # Specify IFormatProvider
dotnet_diagnostic.CA1848.severity = suggestion   # Use LoggerMessage delegates
dotnet_diagnostic.CA1034.severity = suggestion   # Nested types should not be visible
dotnet_diagnostic.CA1711.severity = none         # Identifiers should not have incorrect suffix (conflicts with domain naming)
dotnet_diagnostic.CA1716.severity = none         # Identifiers should not match keywords (too strict)
dotnet_diagnostic.CA1861.severity = suggestion   # Avoid constant arrays as arguments

# SonarAnalyzer Rules - Enterprise level but balanced
dotnet_diagnostic.S1135.severity = suggestion    # TODO comments (keep as suggestion)
dotnet_diagnostic.S1118.severity = warning       # Utility classes should not have public constructors
dotnet_diagnostic.S6964.severity = suggestion    # Value type property should be nullable/required (reduced)
dotnet_diagnostic.S1481.severity = suggestion    # Unused local variables should be removed

# Threading Rules - Critical for enterprise  
dotnet_diagnostic.VSTHRD200.severity = warning   # Use Async suffix for async methods (reduced from error)
dotnet_diagnostic.VSTHRD010.severity = error     # Invoke single-threaded types on Main thread
dotnet_diagnostic.VSTHRD100.severity = error     # Avoid async void
dotnet_diagnostic.VSTHRD110.severity = warning   # Observe result of async calls

# AsyncFixer Rules - Performance focused but not too strict
dotnet_diagnostic.AsyncFixer01.severity = suggestion  # Unnecessary async/await usage
dotnet_diagnostic.AsyncFixer02.severity = warning     # Long-running or blocking operations inside an async method
dotnet_diagnostic.AsyncFixer03.severity = suggestion  # Fire-and-forget async-void methods or delegates
dotnet_diagnostic.AsyncFixer04.severity = suggestion  # Fire-and-forget async call inside a using block

# Meziantou Analyzer Rules - Best practices but balanced
dotnet_diagnostic.MA0001.severity = suggestion      # StringComparison is missing
dotnet_diagnostic.MA0002.severity = suggestion      # IEqualityComparer<string> or IComparer<string> is missing
dotnet_diagnostic.MA0003.severity = suggestion      # Add parameter name to improve readability
dotnet_diagnostic.MA0004.severity = suggestion      # Use Task.ConfigureAwait
dotnet_diagnostic.MA0006.severity = suggestion      # Use String.Equals instead of equality operator
dotnet_diagnostic.MA0007.severity = suggestion      # Add a comma after the last value
dotnet_diagnostic.MA0011.severity = suggestion      # IFormatProvider is missing
dotnet_diagnostic.MA0015.severity = suggestion      # Specify the parameter name in ArgumentException
dotnet_diagnostic.MA0016.severity = suggestion      # Prefer using collection abstraction instead of implementation

# ErrorProne.NET Rules
dotnet_diagnostic.EPN0001.severity = warning     # Possible null reference exception
dotnet_diagnostic.EPN0002.severity = warning     # Possible multiple enumeration
dotnet_diagnostic.EPS0001.severity = warning     # Struct with default equality implementation

##################################################
# 🚨 ENTERPRISE SECURITY & QUALITY GATES 🚨
##################################################
# These rules BREAK the build - Critical for production!

# ⚠️ NULL REFERENCE SAFETY - CRITICAL ERRORS
dotnet_diagnostic.CS8601.severity = error       # Possible null reference assignment
dotnet_diagnostic.CS8602.severity = error       # Dereference of a possibly null reference
dotnet_diagnostic.CS8603.severity = error       # Possible null reference return
dotnet_diagnostic.CS8604.severity = error       # Possible null reference argument
dotnet_diagnostic.CS8618.severity = error       # Non-nullable field must contain a non-null value
dotnet_diagnostic.CS8625.severity = error       # Cannot convert null literal to non-nullable reference type

# 🔒 SECURITY VULNERABILITIES - ZERO TOLERANCE
dotnet_diagnostic.CA5394.severity = error       # Random is an insecure random number generator
dotnet_diagnostic.CA5359.severity = error       # ServerCertificateValidationCallback accepts any server certificate
dotnet_diagnostic.CA5386.severity = error       # Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5387.severity = error       # Do not use weak key derivation function
dotnet_diagnostic.CA5388.severity = error       # Ensure sufficient iteration count when using weak key derivation function
dotnet_diagnostic.CA5389.severity = error       # Do not add archive item's path to the target file system path
dotnet_diagnostic.CA5390.severity = error       # Do not hard-code encryption key
dotnet_diagnostic.CA5391.severity = error       # Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5392.severity = error       # Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5393.severity = error       # Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5396.severity = error       # Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5397.severity = error       # Do not use deprecated SslProtocols values
dotnet_diagnostic.CA5398.severity = error       # Avoid hardcoded SslProtocols values
dotnet_diagnostic.CA5399.severity = error       # HttpClients should enable certificate revocation list checks
dotnet_diagnostic.CA5400.severity = error       # Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5401.severity = error       # Do not use CreateEncryptor with non-default IV
dotnet_diagnostic.CA5402.severity = error       # Use CreateEncryptor with the default IV
dotnet_diagnostic.CA5403.severity = error       # Do not hard-code certificate

# 🚫 STRING OPERATIONS - MUST SPECIFY CULTURE
dotnet_diagnostic.CA1307.severity = error       # Specify StringComparison for clarity
dotnet_diagnostic.CA1308.severity = error       # Normalize strings to uppercase (avoid ToLowerInvariant)
dotnet_diagnostic.CA1309.severity = error       # Use ordinal string comparison

# 🔗 URI & URL SECURITY
dotnet_diagnostic.CA1056.severity = error       # URI-like properties should not be strings
dotnet_diagnostic.CA2234.severity = error       # Pass system uri objects instead of strings

# 🧠 EXCEPTION HANDLING - ENTERPRISE STANDARDS
dotnet_diagnostic.S2139.severity = error        # Either log or rethrow exceptions with context
dotnet_diagnostic.CA1065.severity = error       # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA2200.severity = error       # Rethrow to preserve stack details

# 🏗️ ARCHITECTURE VIOLATIONS - CLEAN CODE
dotnet_diagnostic.CA1000.severity = error       # Do not declare static members on generic types
dotnet_diagnostic.CA1721.severity = error       # Property names should not match get methods
dotnet_diagnostic.CA2225.severity = error       # Operator overloads should have named alternates

# 🌐 HARDCODED VALUES - SECURITY RISK  
dotnet_diagnostic.S1075.severity = error        # URIs should not be hardcoded
dotnet_diagnostic.S1313.severity = error        # Hardcoded IP addresses should not be used

# 🔒 SSL/TLS SECURITY - CRITICAL
dotnet_diagnostic.S4830.severity = error        # Server certificates should be verified during SSL/TLS connections
dotnet_diagnostic.S5659.severity = error        # JWT should be signed and verified

# ⚡ ASYNC/AWAIT MISUSE - DEADLOCK PREVENTION
dotnet_diagnostic.CS1998.severity = error       # Async method lacks await operators and will run synchronously
dotnet_diagnostic.VSTHRD100.severity = error    # Avoid async void
dotnet_diagnostic.VSTHRD110.severity = error    # Observe result of async calls

# 🧹 CODE QUALITY - ENFORCE CLEAN CODE
dotnet_diagnostic.S1066.severity = warning      # Mergeable if statements should be combined
dotnet_diagnostic.S3267.severity = warning      # Loops should be simplified with LINQ Where
dotnet_diagnostic.S3875.severity = warning      # operator== overloads should be removed when Equals is overridden
dotnet_diagnostic.S3923.severity = warning      # All branches in conditional structure should not have same implementation

# 📋 DOCUMENTATION - ENTERPRISE REQUIREMENTS
dotnet_diagnostic.CA1014.severity = warning     # Mark assemblies with CLSCompliant
dotnet_diagnostic.CS1591.severity = none        # Missing XML comment (disabled to avoid noise)

##################################################
# 🎯 SUMMARY: Pipeline will FAIL on:
# - Null reference violations (CS8601, CS8602, etc.)
# - Security vulnerabilities (CA5394, CA5359, etc.) 
# - Async/await misuse (CS1998, VSTHRD100, etc.)
# - String operation errors (CA1307, CA1308, etc.)
# - Architecture violations (CA1000, CA1721, etc.)
##################################################

# 🚀 ENHANCED DEVELOPMENT TOOLS - CONFLICT PREVENTION
##################################################

# 📊 BannedApiAnalyzers - Dangerous API Prevention
dotnet_diagnostic.RS0030.severity = error       # Do not used banned APIs
dotnet_diagnostic.RS0031.severity = error       # The symbol is banned in this project

# 🔍 PublicApiAnalyzers - API Surface Management  
dotnet_diagnostic.RS0016.severity = suggestion  # Symbol is part of declared public API
dotnet_diagnostic.RS0017.severity = suggestion  # Symbol is not part of declared API
dotnet_diagnostic.RS0022.severity = warning     # Constructor make noninheritable base class inheritable
dotnet_diagnostic.RS0024.severity = warning     # The contents of the public API files are invalid
dotnet_diagnostic.RS0025.severity = warning     # Duplicate symbol in public API files

# ⚡ AsyncFixer - Advanced Threading Rules (Non-conflicting)
dotnet_diagnostic.AsyncFixer01.severity = suggestion  # Unnecessary async/await usage
dotnet_diagnostic.AsyncFixer02.severity = warning     # Long-running operations in async method
dotnet_diagnostic.AsyncFixer03.severity = error       # Fire-and-forget async-void (CRITICAL for betting!)
dotnet_diagnostic.AsyncFixer04.severity = suggestion  # Fire-and-forget in using block
dotnet_diagnostic.AsyncFixer05.severity = warning     # Downcasting from a nested task to an outer task

# 🔄 Microsoft.VisualStudio.Threading.Analyzers - Deadlock Prevention
dotnet_diagnostic.VSTHRD001.severity = suggestion  # Avoid legacy thread switching APIs
dotnet_diagnostic.VSTHRD002.severity = suggestion  # Avoid problematic synchronous waits
dotnet_diagnostic.VSTHRD003.severity = warning     # Avoid awaiting foreign Tasks
dotnet_diagnostic.VSTHRD004.severity = suggestion  # Await SwitchToMainThreadAsync
dotnet_diagnostic.VSTHRD011.severity = suggestion  # Use AsyncLazy<T>
dotnet_diagnostic.VSTHRD012.severity = suggestion  # Provide JoinableTaskFactory where allowed
dotnet_diagnostic.VSTHRD200.severity = suggestion  # Use Async suffix for async methods

# 🔤 Meziantou.Analyzer - Performance & Culture (Enhanced)
dotnet_diagnostic.MA0001.severity = warning       # StringComparison is missing (betting precision!)
dotnet_diagnostic.MA0002.severity = warning       # IEqualityComparer<string> missing  
dotnet_diagnostic.MA0004.severity = suggestion    # Use Task.ConfigureAwait(false)
dotnet_diagnostic.MA0006.severity = warning       # Use String.Equals instead of ==
dotnet_diagnostic.MA0011.severity = warning       # IFormatProvider is missing (financial calculations!)
dotnet_diagnostic.MA0015.severity = warning       # Specify parameter name in ArgumentException
dotnet_diagnostic.MA0016.severity = suggestion    # Prefer collection abstraction
dotnet_diagnostic.MA0018.severity = suggestion    # Do not declare static members on generic types
dotnet_diagnostic.MA0020.severity = suggestion    # Use direct methods instead of LINQ
dotnet_diagnostic.MA0025.severity = warning       # Implement the functionality instead of throwing NotImplementedException
dotnet_diagnostic.MA0026.severity = suggestion    # Fix TODO comment
dotnet_diagnostic.MA0028.severity = warning       # Optimize StringBuilder usage
dotnet_diagnostic.MA0040.severity = suggestion    # Flow the cancellation token
dotnet_diagnostic.MA0041.severity = suggestion    # Make class final
dotnet_diagnostic.MA0048.severity = suggestion    # File name must match type name
dotnet_diagnostic.MA0051.severity = suggestion    # Method is too long

# 🔧 ErrorProne.NET - Performance Anti-patterns (Enhanced)
dotnet_diagnostic.EPN0001.severity = warning     # Possible null reference exception
dotnet_diagnostic.EPN0002.severity = warning     # Possible multiple enumeration (performance!)
dotnet_diagnostic.EPN0003.severity = warning     # Possible multiple enumeration of IEnumerable
dotnet_diagnostic.EPS0001.severity = warning     # Struct with default equality implementation
dotnet_diagnostic.EPS0002.severity = warning     # Non-readonly struct used as readonly
dotnet_diagnostic.EPS0003.severity = warning     # This expression is always true/false
dotnet_diagnostic.EPS0004.severity = warning     # Unsafe array/span indexer used with constant
dotnet_diagnostic.EPS0005.severity = warning     # Use Span<T> instead of array for performance
dotnet_diagnostic.EPS0006.severity = warning     # Consider using StringComparison
dotnet_diagnostic.EPS0007.severity = warning     # Prefer is operator
dotnet_diagnostic.EPS0008.severity = warning     # Prefer object.ReferenceEquals
dotnet_diagnostic.EPS0009.severity = warning     # Suspected assignment instead of equality check
dotnet_diagnostic.EPS0010.severity = warning     # Suspected unassigned variable usage
dotnet_diagnostic.EPS0011.severity = warning     # Missing ConfigureAwait(false)
dotnet_diagnostic.EPS0012.severity = warning     # Prefer ReadOnlySpan<char> over string.Substring
dotnet_diagnostic.EPS0013.severity = warning     # Use StringValues.IsNullOrEmpty
dotnet_diagnostic.EPS0014.severity = warning     # Prefer using AsSpan over Substring for ReadOnlySpan<char>

##################################################
# 🎰 BETTING PLATFORM SPECIFIC RULES
##################################################
# These rules are CRITICAL for financial/gaming systems!

# 💰 FINANCIAL PRECISION - ZERO TOLERANCE
dotnet_diagnostic.CA1305.severity = error       # Specify IFormatProvider (currency conversions!)
dotnet_diagnostic.CA1304.severity = error       # Specify CultureInfo (decimal parsing!)
dotnet_diagnostic.MA0011.severity = error       # IFormatProvider missing (financial calculations!)

# 🔒 THREADING SAFETY - DEADLOCK PREVENTION  
dotnet_diagnostic.AsyncFixer03.severity = error # Fire-and-forget async-void (can cause money loss!)
dotnet_diagnostic.VSTHRD002.severity = error    # Avoid problematic synchronous waits (deadlocks!)
dotnet_diagnostic.VSTHRD003.severity = error    # Avoid awaiting foreign Tasks

# ⚡ PERFORMANCE CRITICAL - MILLIONS OF REQUESTS
dotnet_diagnostic.EPN0002.severity = error      # Multiple enumeration (performance killer!)
dotnet_diagnostic.MA0028.severity = error       # Optimize StringBuilder (memory pressure!)
dotnet_diagnostic.EPS0005.severity = warning    # Use Span<T> for performance
dotnet_diagnostic.EPS0012.severity = warning    # Use ReadOnlySpan instead of Substring

# 🧮 PRECISION & ACCURACY  
dotnet_diagnostic.MA0001.severity = error       # StringComparison missing (betting odds comparison!)
dotnet_diagnostic.CA1307.severity = error       # Specify StringComparison (already set above)
dotnet_diagnostic.CA1309.severity = error       # Use ordinal string comparison

##################################################
# 🛡️ CONFLICT RESOLUTION MATRIX
##################################################
# Ensures no tool steps on another tool's territory:

# Disable duplicate/conflicting rules between tools:
dotnet_diagnostic.CA2007.severity = none        # ConfigureAwait - handled by MA0004/EPS0011
dotnet_diagnostic.SA1101.severity = none        # this. prefix - conflicts with modern C# style
dotnet_diagnostic.SA1633.severity = none        # File header - not needed for betting platform
dotnet_diagnostic.IDE0058.severity = none       # Expression value unused - conflicts with performance rules

# SonarQube vs StyleCop conflicts (prefer SonarQube for enterprise):
dotnet_diagnostic.SA1200.severity = suggestion  # Using placement - reduce to avoid conflict
dotnet_diagnostic.S1135.severity = suggestion   # TODO comments - keep as suggestion

# Performance tool precedence:
# Meziantou > ErrorProne > SonarQube for performance rules
# SecurityCodeScan > all others for security rules  
# Microsoft.CodeAnalysis.NetAnalyzers > all for .NET best practices

##################################################
# 🎯 BETTING PLATFORM SUMMARY:
# - 45+ ERROR rules (was 33) - enhanced with financial/performance
# - Zero tool conflicts through careful rule precedence
# - Financial precision enforced (IFormatProvider, CultureInfo)
# - Threading safety for high-concurrency betting
# - Performance optimization for million+ requests
# - Security-first approach for financial transactions
##################################################