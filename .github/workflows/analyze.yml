name: Code Quality & Coverage Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-gate:
    name: Quality & Coverage Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore dependencies
        run: |
          echo "📦 Restoring dependencies..."
          echo "🔍 Debug: Current directory: $(pwd)"
          echo "🔍 Debug: Directory contents:"
          ls -la
          echo "🔍 Debug: src directory contents:"
          ls -la src/
          echo "🔍 Debug: Solution file check:"
          if [ -f "src/FSH.Starter.sln" ]; then
            echo "✅ Solution file found: src/FSH.Starter.sln"
          else
            echo "❌ Solution file not found!"
          fi
          echo ""
          echo "🔄 Running make restore..."
          # Note: restore sadece dependencies için, build otomatik restore yapar
          if ! make restore; then
            echo "⚠️ make restore failed, trying direct restore..."
            if [ -f "src/FSH.Starter.sln" ]; then
              dotnet restore src/FSH.Starter.sln
            else
              dotnet restore src/
            fi
          fi
          echo "✅ Restore completed"
      
      - name: Code Analysis
        id: analyze
        run: |
          echo "🔍 Running static code analysis..."
          echo "🔍 Debug: API project path check:"
          if [ -f "src/api/server/Server.csproj" ]; then
            echo "✅ API project found: src/api/server/Server.csproj"
          else
            echo "❌ API project not found!"
            echo "Available files in src/api/:"
            ls -la src/api/ || echo "src/api directory not found"
          fi
          echo ""
          echo "🔄 Running make analyze..."
          if ! make analyze; then
            echo "⚠️ make analyze failed, trying direct analysis..."
            echo "🧹 Cleaning for fresh analysis..."
            dotnet clean src/api/server/Server.csproj --configuration Release > /dev/null 2>&1 || true
            echo "📋 Building with analysis..."
            if ! dotnet build src/api/server/Server.csproj --no-restore --configuration Release --verbosity normal --no-incremental --force > code-analysis.txt 2>&1; then
              echo "❌ Code analysis failed!"
              echo "analysis_failed=true" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          echo "✅ Code analysis passed"
          echo "analysis_failed=false" >> $GITHUB_OUTPUT
      
      - name: Show code analysis errors if failed
        if: failure() && steps.analyze.outputs.analysis_failed == 'true'
        run: |
          echo "📋 Code Analysis Error Details:"
          echo "==============================="
          cat code-analysis.txt || echo "No analysis file found"
      
      - name: Run unit tests with coverage
        id: tests
        run: |
          echo "🧪 Running unit tests with coverage..."
          if ! make test-unit-coverage; then
            echo "⚠️ make test-unit-coverage failed, trying direct testing..."
            echo "🧹 Cleaning up old coverage files..."
            rm -rf coverage-report/
            rm -rf tests/FSH.Starter.Tests.Unit/TestResults/
            
            echo "🧪 Running tests with coverage..."
            if ! dotnet test tests/FSH.Starter.Tests.Unit/FSH.Starter.Tests.Unit.csproj --configuration Release --collect:"XPlat Code Coverage" --results-directory tests/FSH.Starter.Tests.Unit/TestResults/; then
              echo "❌ Unit tests failed!"
              echo "tests_failed=true" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo "📊 Generating HTML coverage report..."
            dotnet tool install --global dotnet-reportgenerator-globaltool || true
            reportgenerator "-reports:tests/FSH.Starter.Tests.Unit/TestResults/*/coverage.cobertura.xml" "-targetdir:coverage-report" "-reporttypes:Html" "-classfilters:+FSH.Starter.WebApi.*"
          fi
          echo "✅ Unit tests passed"
          echo "tests_failed=false" >> $GITHUB_OUTPUT

      - name: Extract coverage percentage
        id: coverage
        run: |
          if [ ! -f "coverage-report/index.html" ]; then
            echo "❌ Coverage report not found!"
            exit 1
          fi
          
          # Extract coverage percentage from HTML
          COVERAGE=$(grep -o 'cardpercentagebar[0-9]*">[0-9]*%' coverage-report/index.html | grep -o '[0-9]*%' | grep -o '[0-9]*' | head -1)
          
          if [ -z "$COVERAGE" ]; then
            echo "❌ Could not extract coverage percentage!"
            exit 1
          fi
          
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "📊 Current coverage: $COVERAGE%"

      - name: Check coverage threshold
        id: coverage_gate
        run: |
          COVERAGE=${{ steps.coverage.outputs.coverage }}
          THRESHOLD=70
          
          echo "📊 Coverage Analysis:"
          echo "====================="
          echo "Current Coverage: $COVERAGE%"
          echo "Required Threshold: $THRESHOLD%"
          echo ""
          
          if [ "$COVERAGE" -lt "$THRESHOLD" ]; then
            echo "❌ COVERAGE GATE FAILED!"
            echo "Coverage $COVERAGE% is below required threshold of $THRESHOLD%"
            echo ""
            echo "🔧 Actions needed:"
            echo "- Add more unit tests"
            echo "- Improve test coverage for existing code"
            echo "- Check coverage report: coverage-report/index.html"
            echo "coverage_failed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ COVERAGE GATE PASSED!"
            echo "Coverage $COVERAGE% meets the required threshold of $THRESHOLD%"
            echo "coverage_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage-report/
          retention-days: 7

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = ${{ steps.coverage.outputs.coverage || 0 }};
            const threshold = 70;
            const analysisStatus = '${{ steps.analyze.outputs.analysis_failed }}' !== 'true' ? '✅ PASSED' : '❌ FAILED';
            const testsStatus = '${{ steps.tests.outputs.tests_failed }}' !== 'true' ? '✅ PASSED' : '❌ FAILED';
            const coverageStatus = '${{ steps.coverage_gate.outputs.coverage_failed }}' !== 'true' ? '✅ PASSED' : '❌ FAILED';
            
            const overallStatus = analysisStatus.includes('❌') || testsStatus.includes('❌') || coverageStatus.includes('❌') ? '❌' : '✅';
            const emoji = overallStatus === '✅' ? '🎉' : '⚠️';
            
            const comment = `## ${emoji} Code Quality & Coverage Report
            
            ### 📊 Quality Gates Status
            | Gate | Status |
            |------|--------|
            | **Code Analysis** | **${analysisStatus}** |
            | **Unit Tests** | **${testsStatus}** |
            | **Coverage** | **${coverageStatus}** (${coverage}%) |
            | **Threshold** | ${threshold}% |
            
            ### � Summary
            ${overallStatus === '✅'
              ? '🎯 **All quality gates passed!** Ready to merge.' 
              : '🚫 **Quality gates failed.** Please fix the issues before merging.'}
            
            ${overallStatus === '❌' 
              ? `
            #### 🔧 Required Actions:
            ${analysisStatus.includes('❌') ? '- Fix code analysis errors\n' : ''}${testsStatus.includes('❌') ? '- Fix failing unit tests\n' : ''}${coverageStatus.includes('❌') ? `- Increase test coverage to at least ${threshold}%\n` : ''}
            ` : ''}
            
            📊 [View detailed reports](../actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Final status check
        if: always()
        run: |
          echo "🔍 Final Pipeline Status Check"
          echo "============================="
          
          ANALYSIS_FAILED="${{ steps.analyze.outputs.analysis_failed }}"
          TESTS_FAILED="${{ steps.tests.outputs.tests_failed }}"
          COVERAGE_FAILED="${{ steps.coverage_gate.outputs.coverage_failed }}"
          COVERAGE=${{ steps.coverage.outputs.coverage }}
          
          echo "📊 Gate Results:"
          echo "- Code Analysis: $([ "$ANALYSIS_FAILED" = "true" ] && echo "❌ FAILED" || echo "✅ PASSED")"
          echo "- Unit Tests: $([ "$TESTS_FAILED" = "true" ] && echo "❌ FAILED" || echo "✅ PASSED")"
          echo "- Coverage Gate: $([ "$COVERAGE_FAILED" = "true" ] && echo "❌ FAILED ($COVERAGE%)" || echo "✅ PASSED ($COVERAGE%)")"
          echo ""
          
          if [ "$ANALYSIS_FAILED" = "true" ] || [ "$TESTS_FAILED" = "true" ] || [ "$COVERAGE_FAILED" = "true" ]; then
            echo "❌ PIPELINE FAILED - Quality gates not met"
            echo "🚫 Commit/PR will be rejected"
            exit 1
          else
            echo "✅ ALL QUALITY GATES PASSED"
            echo "🎉 Pipeline completed successfully"
          fi
